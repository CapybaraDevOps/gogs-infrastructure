pipeline {
    agent any
     tools {
		jfrog 'jfrog-cli'
	}
    parameters {
        choice(name: 'ENV', choices: ['DEV', 'STAGE', 'PROD'], description: 'Deployment environment')
        string(name: 'BUILDNAME', defaultValue: 'gogs', description: 'Build Name')
    }
    environment {
        GOOGLE_CREDENTIALS = credentials('terraform_creds')
    }
    stages {
        stage('Checkout') {
             steps {
                script {
                    git branch: 'main', credentialsId: 'gitcreds', url: 'git@github.com:CapybaraDevOps/gogs-infrastructure.git'
                }
            }
        }
        stage('Compile') {
            steps {
                script {
                    sh '''
                    cd gogs
                    go build -o gogs
                    '''
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    sh '''
                    ./gogs web &
                    sleep 10
                    pkill gogs
                    '''
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    sh '''
                    go build -tags "pam cert" -o gogs
                    '''
                }
            }
        }
        stage('Configuration') {
             steps {
                script {
                    sh '''
                    mkdir -p gogs/custom/conf
                    cat <<EOT >> gogs/custom/conf/app.ini
                    EOT
                    '''
                }
            }
        }
        stage('Docker Image') {
              steps {
                script {
                    sh '''
                    cat <<EOF > Dockerfile
                    FROM golang:1:18-alpine
                    RUN apk add --no-cache git pam-dev
                    WORKDIR /app
                    COPY . .
                    RUN go build -tags "pam cert" -o gogs
                    EXPOSE 3000
                    CMD ["./gogs", "web"]
                    EOF
                    docker build -t gogs_docker_image .
                    '''
                }
            }
        }
        stage('Artifactory') {
         steps {
                script {
                    def hash = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
                    def buildName = "${params.ENV}-${params.BUILDNAME}-$BUILD_NUMBER-${hash}"

                    def repo = ""
                    if (params.ENV == 'DEV') {
                        repo = 'gogs-dev-docker-local'
                    } else if (params.ENV == 'STAGE') {
                        repo = 'gogs-stage-docker-local'
                    } else if (params.ENV == 'PROD') {
                        repo = 'gogs-prod-docker-local'
                    }

                    docker.withRegistry("https://35.242.232.104", artifactory_docker_creds) {
                        docker.image("gogs_docker_image").push("${repo}/${buildName}")
                    }
                    jf "rt bp"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}